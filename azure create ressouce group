################################################################################
#                             sys-pre-firewall.sh                              #
################################################################################
#!/bin/bash

# Update package lists
sudo apt update

# Install firewall tools (nftables in this example)
sudo apt install nftables

# Install necessary utilities
sudo apt install iproute2 iptables-persistent

# Activate the service, enable on startup
sudo systemctl enable nftables
sudo systemctl start nftables

# If you're using iptables, activate and start the service:
# sudo systemctl enable netfilter-persistent
# sudo systemctl start netfilter-persistent

# Basic configuration (replace with your specific rules)
# Example nftables rules
sudo nano /etc/nftables.conf
# Inside the file (example only, customize as needed)
# table inet filter {
#   chain input {
#     type filter hook input priority 0; policy drop;
#     iif "eth0" accept
#     ct state established,related accept
#     tcp dport {22,80,443} accept
#     udp dport {53} accept
#   }
#   chain forward {
#     type filter hook forward priority 0; policy drop;
#     iif "eth0" oif "eth1" accept # Replace "eth1" with your next-hop device.
#     ct state established,related accept
#   }
# }

# Save the configuration, then load the rules
sudo nft -f /etc/nftables.conf

# If using iptables:
# sudo iptables -A FORWARD -i eth0 -j ACCEPT
# sudo iptables -A INPUT -i eth0 -m state --state RELATED,ESTABLISHED -j ACCEPT
# sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT
# sudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT
# sudo iptables -A INPUT -p tcp --dport 443 -j ACCEPT
# sudo iptables -A INPUT -p udp --dport 53 -j ACCEPT
# sudo iptables -P INPUT DROP
# sudo iptables -P FORWARD DROP
# sudo netfilter-persistent save

# Disable IPv6 if not needed
echo 'net.ipv6.conf.all.disable_ipv6 = 1' | sudo tee /etc/sysctl.d/disable-ipv6.conf
sudo sysctl -p /etc/sysctl.d/disable-ipv6.conf

# Additional hardening (optional)
# sudo apt install firewalld # If desired
# sudo systemctl enable firewalld
# sudo systemctl start firewalld
# sudo firewall-cmd --permanent --add-port=22/tcp
# sudo firewall-cmd --permanent --add-port=80/tcp
# sudo firewall-cmd --permanent --add-port=443/tcp
# sudo firewall-cmd --permanent --add-port=53/udp
# sudo firewall-cmd --reload
# sudo firewall-cmd --permanent --add-masquerade
# sudo firewall-cmd --reload

# Fail2ban (optional) for protection against brute-force attacks. Not recommended if traffic is directly from other Qubes VMs.
#sudo apt install fail2ban
#sudo systemctl enable fail2ban
#sudo systemctl start fail2ban
# Configure fail2ban settings for your specific needs in /etc/fail2ban/jail.local


################################################################################
#                                sys-vpn.sh                                    #
################################################################################
#!/bin/bash

# Update package lists
sudo apt update

# Install OpenVPN or WireGuard (choose one):
sudo apt install openvpn
# or:
# sudo apt install wireguard

# Install necessary utilities
sudo apt install network-manager network-manager-openvpn network-manager-openvpn-gnome

# or for Wireguard
# sudo apt install wireguard-tools network-manager-wireguard
# network manager wireguard is more convenient than doing it from the command line

# Configure your VPN (replace with your VPN provider's settings)
# for OpenVPN
sudo mkdir -p /etc/openvpn/
# Copy your VPN .ovpn file to /etc/openvpn/, and replace it with the correct name
sudo cp /path/to/your/vpn.ovpn /etc/openvpn/
# Copy your VPN Certificate and Key if used to /etc/openvpn
# Copy your credentials if necessary
sudo nano /etc/openvpn/auth.txt # Format: username on line one, password on line 2

#Edit the vpn.ovpn file
sudo nano /etc/openvpn/vpn.ovpn # Uncomment auth-user-pass and point to auth.txt if necessary.

# OpenVPN: Basic client configuration
# The connection can be enabled via
# nmcli connection import type openvpn file /etc/openvpn/your_vpn.ovpn
# or using the Network Manager applet

# Wireguard: Basic client configuration is very different. You should use the Network Manager applet.
# You can use nmcli connection import type wireguard file wg0.conf
# You should put your wg0.conf file at the appropriate location.

# Create a kill-switch (optional, but HIGHLY recommended)
# This is an example that uses iptables. Adjust the network interfaces as needed
# sudo iptables -A OUTPUT ! -o tun0 -j DROP # for OpenVPN (replace tun0 if needed).
# for wireguard, you can use the interface given to you. wg0 is a commonly used interface name.
# sudo iptables -A OUTPUT ! -o wg0 -j DROP
# Make sure to start the VPN *before* executing the firewall rules
# Also, note the order is *critical*
# sudo systemctl start openvpn@your_vpn

# To enable the iptables firewall you need to save your rules
# iptables-persistent save
# Or via sudo systemctl enable netfilter-persistent && sudo systemctl start netfilter-persistent

# Basic firewall rules to be set *after* the VPN is connected (replace tun0 if needed).
# If you do it before, they will not work.
# for OpenVPN
# sudo iptables -A FORWARD -i tun0 -j ACCEPT
# sudo iptables -A INPUT -i tun0 -m state --state RELATED,ESTABLISHED -j ACCEPT
# sudo iptables -P FORWARD DROP
# sudo iptables -P INPUT DROP

# Wireguard: For wireguard, this might look like:
# sudo iptables -A FORWARD -i wg0 -j ACCEPT
# sudo iptables -A INPUT -i wg0 -m state --state RELATED,ESTABLISHED -j ACCEPT
# sudo iptables -P FORWARD DROP
# sudo iptables -P INPUT DROP

# Disable IPv6 if not needed
echo 'net.ipv6.conf.all.disable_ipv6 = 1' | sudo tee /etc/sysctl.d/disable-ipv6.conf
sudo sysctl -p /etc/sysctl.d/disable-ipv6.conf

# Fail2ban is not needed in this case, but you can install it for remote management if necessary
# sudo apt install fail2ban
# sudo systemctl enable fail2ban
# sudo systemctl start fail2ban



################################################################################
#                             sys-post-firewall.sh                             #
################################################################################
#!/bin/bash

# Update package lists
sudo apt update

# Install necessary tools
sudo apt install tcpdump iptables iptables-persistent nftables

# Activate the service, enable on startup
sudo systemctl enable nftables
sudo systemctl start nftables

# Basic configuration (example only, customize as needed)
# Example nftables rules. Adjust as needed.
sudo nano /etc/nftables.conf
# Inside the file (example only, customize as needed)
# table inet filter {
#   chain input {
#     type filter hook input priority 0; policy drop;
#     iif "eth0" accept
#     ct state established,related accept
#     tcp dport {22,80,443} accept
#     udp dport {53} accept
#   }
#  chain forward {
#   type filter hook forward priority 0; policy drop;
#     iif "eth0" oif "eth1" accept # Replace "eth1" with your next-hop device.
#     ct state established,related accept
#   }
#}

# Save the configuration, then load the rules
sudo nft -f /etc/nftables.conf

# Additional tools (optional)
sudo apt install snort # Or Suricata if you prefer

# Configure logging (example with rsyslog)
# sudo apt install rsyslog
# Create custom config in /etc/rsyslog.d/
# sudo nano /etc/rsyslog.d/custom-log.conf
# Inside the file (example, customize as needed)
# :programname,isequal,"iptables"  /var/log/iptables.log
# sudo systemctl restart rsyslog

# Fail2ban is not generally needed here
# If you use it, configure it to monitor specific log files
# sudo apt install fail2ban
# sudo systemctl enable fail2ban
# sudo systemctl start fail2ban


################################################################################
#                                sys-tor.sh                                    #
################################################################################
#!/bin/bash

# Update package lists
sudo apt update

# Install Tor
sudo apt install tor

# Configure Tor (minimal needed)
# sudo nano /etc/tor/torrc

# Disable IPv6 if not needed
echo 'net.ipv6.conf.all.disable_ipv6 = 1' | sudo tee /etc/sysctl.d/disable-ipv6.conf
sudo sysctl -p /etc/sysctl.d/disable-ipv6.conf

# Start Tor and enable on startup
sudo systemctl enable tor
sudo systemctl start tor

# No Fail2ban or additional filtering needed. Tor itself is the filter.


################################################################################
#                                sys-usb.sh                                    #
################################################################################
#!/bin/bash
# sys-usb does not require installation and configuration in the same way that other system VMs do.
# It's primary job is device assignment.
# This file will be empty.
# Updates and other rare configurations are handled in dom0.


